/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A globally unique identifier for this component definition instance. This UUID should be changed when this document is revised.
 */
export type ComponentDefinitionUniversallyUniqueIdentifier = string;
/**
 * A name given to the document, which may be used by a tool for display and navigation.
 */
export type DocumentTitle = string;
/**
 * The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type PublicationTimestamp = string;
/**
 * The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type LastModifiedTimestamp = string;
/**
 * A string used to distinguish the current version of the document from other previous (and future) versions.
 */
export type DocumentVersion = string;
/**
 * The OSCAL model version the document was authored against.
 */
export type OSCALVersion = string;
/**
 * A name given to the document revision, which may be used by a tool for display and navigation.
 */
export type DocumentTitle1 = string;
/**
 * The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type PublicationTimestamp1 = string;
/**
 * The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type LastModifiedTimestamp1 = string;
/**
 * A string used to distinguish the current version of the document from other previous (and future) versions.
 */
export type DocumentVersion1 = string;
/**
 * The OSCAL model version the document was authored against.
 */
export type OSCALVersion1 = string;
/**
 * A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type PropertyUniversallyUniqueIdentifier = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
 */
export type PropertyName = string;
/**
 * A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type PropertyNamespace = string;
/**
 * A textual label that provides a sub-type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.
 */
export type PropertyClass = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the annotated property's containing object.
 */
export type AnnotatedPropertyName = string;
/**
 * A unique identifier that can be used to reference this annotated property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type AnnotatedPropertyUniversallyUniqueIdentifier = string;
/**
 * A namespace qualifying the annotated property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type AnnotatedPropertyNamespace = string;
/**
 * Indicates the value of the attribute, characteristic, or quality.
 */
export type AnnotatedPropertyValue = string;
/**
 * Additional commentary on the containing object.
 */
export type Remarks = string;
/**
 * A resolvable URL reference to a resource.
 */
export type HypertextReference = string;
/**
 * Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.
 */
export type Relation = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType = string;
/**
 * A textual label to associate with the link, which may be used for presentation in a tool.
 */
export type LinkText = string;
/**
 * Qualifies the kind of document identifier.
 */
export type DocumentIdentificationScheme = string;
/**
 * A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.
 */
export type RoleIdentifier = string;
/**
 * A name given to the role, which may be used by a tool for display and navigation.
 */
export type RoleTitle = string;
/**
 * A short common name, abbreviation, or acronym for the role.
 */
export type RoleShortName = string;
/**
 * A summary of the role's purpose and associated responsibilities.
 */
export type RoleDescription = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type LocationUniversallyUniqueIdentifier = string;
/**
 * A name given to the location, which may be used by a tool for display and navigation.
 */
export type LocationTitle = string;
/**
 * Indicates the type of address.
 */
export type AddressType = string;
/**
 * A single line of an address.
 */
export type AddressLine = string;
/**
 * City, town or geographical region for the mailing address.
 */
export type City = string;
/**
 * State, province or analogous geographical region for mailing address
 */
export type State = string;
/**
 * Postal or ZIP code for mailing address
 */
export type PostalCode = string;
/**
 * The ISO 3166-1 alpha-2 country code for the mailing address.
 */
export type CountryCode = string;
/**
 * An email address as defined by RFC 5322 Section 3.4.1.
 */
export type EmailAddress = string;
/**
 * Indicates the type of phone number.
 */
export type TypeFlag = string;
/**
 * The uniform resource locator (URL) for a web site or Internet presence associated with the location.
 */
export type LocationURL = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given party across revisions of the document.
 */
export type PartyUniversallyUniqueIdentifier = string;
/**
 * A category describing the kind of party the object describes.
 */
export type PartyType = "person" | "organization";
/**
 * The full name of the party. This is typically the legal name associated with the party.
 */
export type PartyName = string;
/**
 * A short common name, abbreviation, or acronym for the party.
 */
export type PartyShortName = string;
/**
 * Indicates the type of external identifier.
 */
export type ExternalIdentifierSchema = string;
/**
 * An email address as defined by RFC 5322 Section 3.4.1.
 */
export type EmailAddress1 = string;
/**
 * Indicates the type of phone number.
 */
export type TypeFlag1 = string;
/**
 * Indicates the type of address.
 */
export type AddressType1 = string;
/**
 * A single line of an address.
 */
export type AddressLine1 = string;
/**
 * City, town or geographical region for the mailing address.
 */
export type City1 = string;
/**
 * State, province or analogous geographical region for mailing address
 */
export type State1 = string;
/**
 * Postal or ZIP code for mailing address
 */
export type PostalCode1 = string;
/**
 * The ISO 3166-1 alpha-2 country code for the mailing address.
 */
export type CountryCode1 = string;
/**
 * References a location defined in metadata.
 */
export type LocationReference = string;
/**
 * Identifies that the party object is a member of the organization associated with the provided UUID.
 */
export type OrganizationalAffiliation = string;
/**
 * References a party defined in metadata.
 */
export type PartyReference = string;
/**
 * A link to a resource that defines a set of components and/or capabilities to import into this collection.
 */
export type HyperlinkReference = string;
/**
 * A category describing the purpose of the component.
 */
export type ComponentType = string;
/**
 * A human readable name for the component.
 */
export type ComponentTitle = string;
/**
 * A description of the component, including information about its function.
 */
export type ComponentDescription = string;
/**
 * A summary of the technological or business purpose of the component.
 */
export type Purpose = string;
/**
 * A globally unique identifier that can be used to reference this service protocol entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.
 */
export type ServiceProtocolInformationUniversallyUniqueIdentifier = string;
/**
 * The common name of the protocol, which should be the appropriate "service name" from the IANA Service Name and Transport Protocol Port Number Registry.
 */
export type ProtocolName = string;
/**
 * A human readable name for the protocol (e.g., Transport Layer Security).
 */
export type TitleField = string;
/**
 * Indicates the starting port number in a port range
 */
export type Start = number;
/**
 * Indicates the ending port number in a port range
 */
export type End = number;
/**
 * Indicates the transport type.
 */
export type Transport = "TCP" | "UDP";
/**
 * A unique identifier for the set of implemented controls.
 */
export type ControlImplementationSetIdentifier = string;
/**
 * A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.
 */
export type SourceResourceReference = string;
/**
 * A description of how the spefied set of controls are implemented for the containing component or capability.
 */
export type ControlImplementationDescription = string;
/**
 * A unique identifier for a specific control implementation.
 */
export type ControlImplementationIdentifier = string;
/**
 * A reference to a control identifier.
 */
export type ControlIdentifierReference = string;
/**
 * A description of how the spefied control is implemented for the containing component or capability.
 */
export type ControlImplementationDescription1 = string;
/**
 * A parameter value or set of values.
 */
export type ParameterValue = string;
/**
 * A unique identifier for a specific control implementation.
 */
export type ControlStatementImplementationIdentifier = string;
/**
 * A summary of how the containing control statement is implemented by the component or capability.
 */
export type StatementImplementationDescription = string;
/**
 * The capability's human-readable name.
 */
export type CapabilityName = string;
/**
 * A summary of the capability.
 */
export type CapabilityDescription = string;
/**
 * A description of the component, including information about its function.
 */
export type ComponentDescription1 = string;
/**
 * A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistantly used for a given resource across revisions of the document.
 */
export type ResourceUniversallyUniqueIdentifier = string;
/**
 * A name given to the resource, which may be used by a tool for display and navigation.
 */
export type ResourceTitle = string;
/**
 * A short summary of the resource used to indicate the purpose of the resource.
 */
export type ResourceDescription = string;
/**
 * Qualifies the kind of document identifier.
 */
export type DocumentIdentificationScheme1 = string;
/**
 * A line of citation text.
 */
export type CitationText = string;
/**
 * A resolvable URI reference to a resource.
 */
export type HypertextReference1 = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType1 = string;
/**
 * Method by which a hash is derived
 */
export type HashAlgorithm = string;
/**
 * Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.
 */
export type FileName = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType2 = string;

export interface OscalComponentSchema {
  "component-definition": ComponentDefinition;
}
/**
 * A collection of component descriptions, which may optionally be grouped by capability.
 */
export interface ComponentDefinition {
  uuid: ComponentDefinitionUniversallyUniqueIdentifier;
  metadata: PublicationMetadata;
  "import-component-definitions"?: [ImportComponentDefinition, ...ImportComponentDefinition[]];
  components?: {
    [k: string]: Component & {
      [k: string]: unknown;
    };
  };
  capabilities?: {
    [k: string]: Capability & {
      [k: string]: unknown;
    };
  };
  "back-matter"?: BackMatter;
}
/**
 * Provides information about the publication and availability of the containing document.
 */
export interface PublicationMetadata {
  title: DocumentTitle;
  published?: PublicationTimestamp;
  "last-modified": LastModifiedTimestamp;
  version: DocumentVersion;
  "oscal-version": OSCALVersion;
  revisions?: [RevisionHistoryEntry, ...RevisionHistoryEntry[]];
  "document-ids"?: [DocumentIdentifier, ...DocumentIdentifier[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  roles?: [Role, ...Role[]];
  locations?: [Location, ...Location[]];
  parties?: [PartyOrganizationOrPerson, ...PartyOrganizationOrPerson[]];
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).
 */
export interface RevisionHistoryEntry {
  title?: DocumentTitle1;
  published?: PublicationTimestamp1;
  "last-modified"?: LastModifiedTimestamp1;
  version?: DocumentVersion1;
  "oscal-version"?: OSCALVersion1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values in some OSCAL formats.
 */
export interface Property {
  uuid?: PropertyUniversallyUniqueIdentifier;
  name: PropertyName;
  ns?: PropertyNamespace;
  class?: PropertyClass;
  value: string;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair with optional explanatory remarks. The value of an annotated property is a simple scalar value.
 */
export interface AnnotatedProperty {
  name: AnnotatedPropertyName;
  uuid?: AnnotatedPropertyUniversallyUniqueIdentifier;
  ns?: AnnotatedPropertyNamespace;
  value: AnnotatedPropertyValue;
  remarks?: Remarks;
}
/**
 * A reference to a local or remote resource
 */
export interface Link {
  href: HypertextReference;
  rel?: Relation;
  "media-type"?: MediaType;
  text?: LinkText;
}
/**
 * A document identifier qualified by an identifier type.
 */
export interface DocumentIdentifier {
  scheme: DocumentIdentificationScheme;
  identifier: string;
}
/**
 * Defines a function assumed or expected to be assumed by a party in a specific situation.
 */
export interface Role {
  id: RoleIdentifier;
  title: RoleTitle;
  "short-name"?: RoleShortName;
  description?: RoleDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * A location, with associated metadata that can be referenced.
 */
export interface Location {
  uuid: LocationUniversallyUniqueIdentifier;
  title?: LocationTitle;
  address: Address;
  "email-addresses"?: [EmailAddress, ...EmailAddress[]];
  "telephone-numbers"?: [TelephoneNumber, ...TelephoneNumber[]];
  urls?: [LocationURL, ...LocationURL[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * A postal address for the location.
 */
export interface Address {
  type?: AddressType;
  "addr-lines"?: [AddressLine, ...AddressLine[]];
  city?: City;
  state?: State;
  "postal-code"?: PostalCode;
  country?: CountryCode;
}
/**
 * Contact number by telephone.
 */
export interface TelephoneNumber {
  type?: TypeFlag;
  number: string;
}
/**
 * A responsible entity which is either a person or an organization.
 */
export interface PartyOrganizationOrPerson {
  uuid: PartyUniversallyUniqueIdentifier;
  type: PartyType;
  name?: PartyName;
  "short-name"?: PartyShortName;
  "external-ids"?: [PartyExternalIdentifier, ...PartyExternalIdentifier[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "email-addresses"?: [EmailAddress1, ...EmailAddress1[]];
  "telephone-numbers"?: [TelephoneNumber1, ...TelephoneNumber1[]];
  addresses?: [Address1, ...Address1[]];
  "location-uuids"?: [LocationReference, ...LocationReference[]];
  "member-of-organizations"?: [OrganizationalAffiliation, ...OrganizationalAffiliation[]];
  remarks?: Remarks;
}
/**
 * An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)
 */
export interface PartyExternalIdentifier {
  scheme: ExternalIdentifierSchema;
  id: string;
}
/**
 * Contact number by telephone.
 */
export interface TelephoneNumber1 {
  type?: TypeFlag1;
  number: string;
}
/**
 * A postal address for the location.
 */
export interface Address1 {
  type?: AddressType1;
  "addr-lines"?: [AddressLine1, ...AddressLine1[]];
  city?: City1;
  state?: State1;
  "postal-code"?: PostalCode1;
  country?: CountryCode1;
}
/**
 * A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.
 */
export interface ResponsibleParty {
  "party-uuids": [PartyReference, ...PartyReference[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Loads a component definition from another resource.
 */
export interface ImportComponentDefinition {
  href: HyperlinkReference;
}
/**
 * A defined component that can be part of an implemented system.
 */
export interface Component {
  type: ComponentType;
  title: ComponentTitle;
  description: ComponentDescription;
  purpose?: Purpose;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  protocols?: [ServiceProtocolInformation, ...ServiceProtocolInformation[]];
  "control-implementations"?: [ControlImplementationSet, ...ControlImplementationSet[]];
  remarks?: Remarks;
}
/**
 * A reference to one or more roles with responsibility for performing a function relative to the containing object.
 */
export interface ResponsibleRole {
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "party-uuids"?: [PartyReference, ...PartyReference[]];
  remarks?: Remarks;
}
/**
 * Information about the protocol used to provide a service.
 */
export interface ServiceProtocolInformation {
  uuid?: ServiceProtocolInformationUniversallyUniqueIdentifier;
  name: ProtocolName;
  title?: TitleField;
  "port-ranges"?: [PortRange, ...PortRange[]];
}
/**
 * Where applicable this is the IPv4 port range on which the service operates.
 */
export interface PortRange {
  start?: Start;
  end?: End;
  transport?: Transport;
}
/**
 * Defines how the component or capability supports a set of controls.
 */
export interface ControlImplementationSet {
  uuid: ControlImplementationSetIdentifier;
  source: SourceResourceReference;
  description: ControlImplementationDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "implemented-requirements": [ControlImplementation, ...ControlImplementation[]];
}
/**
 * Describes how the containing component or capability implements an individual control.
 */
export interface ControlImplementation {
  uuid: ControlImplementationIdentifier;
  "control-id"?: ControlIdentifierReference;
  description: ControlImplementationDescription1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  "set-parameters"?: {
    [k: string]: SetParameterValue & {
      [k: string]: unknown;
    };
  };
  statements?: {
    [k: string]: ControlStatementImplementation & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies the parameter that will be set by the enclosed value.
 */
export interface SetParameterValue {
  values: [ParameterValue, ...ParameterValue[]];
}
/**
 * Identifies which statements within a control are addressed.
 */
export interface ControlStatementImplementation {
  uuid: ControlStatementImplementationIdentifier;
  description: StatementImplementationDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * A grouping of other components and/or capabilities.
 */
export interface Capability {
  name: CapabilityName;
  description: CapabilityDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "incorporates-components"?: {
    [k: string]: IncorporatesComponent & {
      [k: string]: unknown;
    };
  };
  "control-implementations"?: [ControlImplementationSet, ...ControlImplementationSet[]];
  remarks?: Remarks;
}
/**
 * TBD
 */
export interface IncorporatesComponent {
  description: ComponentDescription1;
}
/**
 * A collection of resources, which may be included directly or by reference.
 */
export interface BackMatter {
  resources?: [Resource, ...Resource[]];
}
/**
 * A resource associated with content in the containing document. A resource may be directly included in the document base64 encoded or may point to one or more equavalent internet resources.
 */
export interface Resource {
  uuid: ResourceUniversallyUniqueIdentifier;
  title?: ResourceTitle;
  description?: ResourceDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  "document-ids"?: [DocumentIdentifier1, ...DocumentIdentifier1[]];
  citation?: Citation;
  rlinks?: [ResourceLink, ...ResourceLink[]];
  base64?: Base64;
  remarks?: Remarks;
}
/**
 * A document identifier qualified by an identifier type.
 */
export interface DocumentIdentifier1 {
  scheme: DocumentIdentificationScheme1;
  identifier: string;
}
/**
 * A citation consisting of end note text and optional structured bibliographic data.
 */
export interface Citation {
  text: CitationText;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  biblio?: BibliographicDefinition;
}
/**
 * A container for structured bibliographic information. The model of this information is undefined by OSCAL.
 */
export interface BibliographicDefinition {}
/**
 * A pointer to an external resource with an optional hash for verification and change detection.
 */
export interface ResourceLink {
  href: HypertextReference1;
  "media-type"?: MediaType1;
  hashes?: [Hash, ...Hash[]];
}
/**
 * A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
 */
export interface Hash {
  algorithm: HashAlgorithm;
  value: string;
}
/**
 * The Base64 alphabet in RFC 2045 - aligned with XSD.
 */
export interface Base64 {
  filename?: FileName;
  "media-type"?: MediaType2;
  value: string;
}
