/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Uniquely identifies this assessment results file. This UUID must be changed each time the content of the results changes.
 */
export type AssessmentResultsUniversallyUniqueIdentifier = string;
/**
 * A name given to the document, which may be used by a tool for display and navigation.
 */
export type DocumentTitle = string;
/**
 * The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type PublicationTimestamp = string;
/**
 * The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type LastModifiedTimestamp = string;
/**
 * A string used to distinguish the current version of the document from other previous (and future) versions.
 */
export type DocumentVersion = string;
/**
 * The OSCAL model version the document was authored against.
 */
export type OSCALVersion = string;
/**
 * A name given to the document revision, which may be used by a tool for display and navigation.
 */
export type DocumentTitle1 = string;
/**
 * The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type PublicationTimestamp1 = string;
/**
 * The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type LastModifiedTimestamp1 = string;
/**
 * A string used to distinguish the current version of the document from other previous (and future) versions.
 */
export type DocumentVersion1 = string;
/**
 * The OSCAL model version the document was authored against.
 */
export type OSCALVersion1 = string;
/**
 * A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type PropertyUniversallyUniqueIdentifier = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
 */
export type PropertyName = string;
/**
 * A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type PropertyNamespace = string;
/**
 * A textual label that provides a sub-type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.
 */
export type PropertyClass = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the annotated property's containing object.
 */
export type AnnotatedPropertyName = string;
/**
 * A unique identifier that can be used to reference this annotated property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type AnnotatedPropertyUniversallyUniqueIdentifier = string;
/**
 * A namespace qualifying the annotated property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type AnnotatedPropertyNamespace = string;
/**
 * Indicates the value of the attribute, characteristic, or quality.
 */
export type AnnotatedPropertyValue = string;
/**
 * Additional commentary on the containing object.
 */
export type Remarks = string;
/**
 * A resolvable URL reference to a resource.
 */
export type HypertextReference = string;
/**
 * Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.
 */
export type Relation = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType = string;
/**
 * A textual label to associate with the link, which may be used for presentation in a tool.
 */
export type LinkText = string;
/**
 * Qualifies the kind of document identifier.
 */
export type DocumentIdentificationScheme = string;
/**
 * A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.
 */
export type RoleIdentifier = string;
/**
 * A name given to the role, which may be used by a tool for display and navigation.
 */
export type RoleTitle = string;
/**
 * A short common name, abbreviation, or acronym for the role.
 */
export type RoleShortName = string;
/**
 * A summary of the role's purpose and associated responsibilities.
 */
export type RoleDescription = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type LocationUniversallyUniqueIdentifier = string;
/**
 * A name given to the location, which may be used by a tool for display and navigation.
 */
export type LocationTitle = string;
/**
 * Indicates the type of address.
 */
export type AddressType = string;
/**
 * A single line of an address.
 */
export type AddressLine = string;
/**
 * City, town or geographical region for the mailing address.
 */
export type City = string;
/**
 * State, province or analogous geographical region for mailing address
 */
export type State = string;
/**
 * Postal or ZIP code for mailing address
 */
export type PostalCode = string;
/**
 * The ISO 3166-1 alpha-2 country code for the mailing address.
 */
export type CountryCode = string;
/**
 * An email address as defined by RFC 5322 Section 3.4.1.
 */
export type EmailAddress = string;
/**
 * Indicates the type of phone number.
 */
export type TypeFlag = string;
/**
 * The uniform resource locator (URL) for a web site or Internet presence associated with the location.
 */
export type LocationURL = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given party across revisions of the document.
 */
export type PartyUniversallyUniqueIdentifier = string;
/**
 * A category describing the kind of party the object describes.
 */
export type PartyType = "person" | "organization";
/**
 * The full name of the party. This is typically the legal name associated with the party.
 */
export type PartyName = string;
/**
 * A short common name, abbreviation, or acronym for the party.
 */
export type PartyShortName = string;
/**
 * Indicates the type of external identifier.
 */
export type ExternalIdentifierSchema = string;
/**
 * An email address as defined by RFC 5322 Section 3.4.1.
 */
export type EmailAddress1 = string;
/**
 * Indicates the type of phone number.
 */
export type TypeFlag1 = string;
/**
 * Indicates the type of address.
 */
export type AddressType1 = string;
/**
 * A single line of an address.
 */
export type AddressLine1 = string;
/**
 * City, town or geographical region for the mailing address.
 */
export type City1 = string;
/**
 * State, province or analogous geographical region for mailing address
 */
export type State1 = string;
/**
 * Postal or ZIP code for mailing address
 */
export type PostalCode1 = string;
/**
 * The ISO 3166-1 alpha-2 country code for the mailing address.
 */
export type CountryCode1 = string;
/**
 * References a location defined in metadata.
 */
export type LocationReference = string;
/**
 * Identifies that the party object is a member of the organization associated with the provided UUID.
 */
export type OrganizationalAffiliation = string;
/**
 * References a party defined in metadata.
 */
export type PartyReference = string;
/**
 * >A resolvable URL reference to the assessment plan governing the assessment activities.
 */
export type AssessmentPlanReference = string;
/**
 * A reference to a control identifier.
 */
export type ControlIdentifierReference = string;
/**
 * A human-readable description of this control objective.
 */
export type ObjectiveDescription = string;
/**
 * A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.
 */
export type PartIdentifier = string;
/**
 * A textual label that uniquely identifies the part's semantic type.
 */
export type PartName = string;
/**
 * A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type PartNamespace = string;
/**
 * A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.
 */
export type PartClass = string;
/**
 * A name given to the part, which may be used by a tool for display and navigation.
 */
export type PartTitle = string;
/**
 * Permits multiple paragraphs, lists, tables etc.
 */
export type PartText = string;
/**
 * Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given included activity across revisions of the document.
 */
export type AssessmentActivityUniversallyUniqueIdentifier = string;
/**
 * The title for this included activity.
 */
export type IncludedActivityTitle = string;
/**
 * A human-readable description of this included activity.
 */
export type IncludedActivityDescription = string;
/**
 * Uniquely identifies this defined action. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given test step across revisions of the document.
 */
export type ActionUniversallyUniqueIdentifier = string;
/**
 * The title for this action.
 */
export type ActionTitle = string;
/**
 * A human-readable description of this action.
 */
export type ActionDescription = string;
/**
 * A human-readable description of control objectives.
 */
export type ControlObjectiveDescription = string;
/**
 * A human-readable description of in-scope controls specified for assessment.
 */
export type AssessedControlsDescription = string;
/**
 * A key word to indicate all.
 */
export type All = string;
/**
 * A reference to a control identifier.
 */
export type ControlIdentifierReference1 = string;
/**
 * Used to constrain the selection to only specificly identified statements.
 */
export type IncludeSpecificStatements = string;
/**
 * A reference to a control identifier.
 */
export type ControlIdentifierReference2 = string;
/**
 * Used to constrain the selection to only specificly identified statements.
 */
export type IncludeSpecificStatements1 = string;
/**
 * A human-readable description of this collection of control objectives.
 */
export type ControlOjectivesDescription = string;
/**
 * A key word to indicate all.
 */
export type All1 = string;
/**
 * Points to an assessment objective.
 */
export type ObjectiveID = string;
/**
 * Uniquely identifies this set of results. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given set of results across revisions.
 */
export type ResultsUniversallyUniqueIdentifier = string;
/**
 * The title for this set of results.
 */
export type ResultsTitle = string;
/**
 * A human-readable description of this set of test results.
 */
export type ResultsDescription = string;
/**
 * Date/time stamp identifying the start of the evidence collection reflected in these results.
 */
export type StartField = string;
/**
 * Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.
 */
export type EndField = string;
/**
 * A category describing the purpose of the component.
 */
export type ComponentType = string;
/**
 * A human readable name for the system component.
 */
export type ComponentTitle = string;
/**
 * A description of the component, including information about its function.
 */
export type ComponentDescription = string;
/**
 * A summary of the technological or business purpose of the component.
 */
export type Purpose = string;
/**
 * The operational status.
 */
export type State2 = "under-development" | "operational" | "disposition" | "other";
/**
 * A globally unique identifier that can be used to reference this service protocol entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.
 */
export type ServiceProtocolInformationUniversallyUniqueIdentifier = string;
/**
 * The common name of the protocol, which should be the appropriate "service name" from the IANA Service Name and Transport Protocol Port Number Registry.
 */
export type ProtocolName = string;
/**
 * A human readable name for the protocol (e.g., Transport Layer Security).
 */
export type TitleField = string;
/**
 * Indicates the starting port number in a port range
 */
export type Start = number;
/**
 * Indicates the ending port number in a port range
 */
export type End = number;
/**
 * Indicates the transport type.
 */
export type Transport = "TCP" | "UDP";
/**
 * A globally unique identifier that can be used to reference this inventory item entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.
 */
export type InventoryItemUniversallyUniqueIdentifier = string;
/**
 * A summary of the inventory item stating its purpose within the system.
 */
export type InventoryItemDescription = string;
/**
 * A reference to a component that is implemented as part of an inventory item.
 */
export type ComponentUniversallyUniqueIdentifierReference = string;
/**
 * A name given to the user, which may be used by a tool for display and navigation.
 */
export type UserTitle = string;
/**
 * A short common name, abbreviation, or acronym for the user.
 */
export type UserShortName = string;
/**
 * A summary of the user's purpose within the system.
 */
export type UserDescription = string;
/**
 * A reference to the roles served by the user.
 */
export type RoleIdentifierReference = string;
/**
 * A human readable name for the privilege.
 */
export type TitleField1 = string;
/**
 * A summary of the privilege's purpose within the system.
 */
export type PrivilegeDescription = string;
/**
 * Describes a function performed for a given authorized privilege by this user class.
 */
export type FunctionsPerformed = string;
/**
 * Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type EventUniversallyUniqueIdentifier = string;
/**
 * The title for this event.
 */
export type EventTitle = string;
/**
 * A human-readable description of this event.
 */
export type EventDescription = string;
/**
 * The event must occur on the specified date.
 */
export type OnDateCondition1 = string;
/**
 * The event must occur on or after the specified date.
 */
export type StartDateCondition = string;
/**
 * The event must occur on or before the specified date.
 */
export type EndDateCondition = string;
/**
 * The event must occur after the specified period has elapsed.
 */
export type Period = number;
/**
 * The unit of time for the period.
 */
export type TimeUnit = "seconds" | "minutes" | "hours" | "days" | "months" | "years";
/**
 * Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.
 */
export type SubjectType = string;
/**
 * A human-readable description of the collection of subjects being included in this assessment.
 */
export type IncludeSubjectsDescription = string;
/**
 * A key word to indicate all.
 */
export type All2 = string;
/**
 * A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.
 */
export type UUIDReference = string;
/**
 * Uniquely identifies an activity to be performed as part of the action. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type AssociatedActivityUniversallyUniqueIdentifier = string;
/**
 * References an activity defined in the list of activities.
 */
export type ActivityUniversallyUniqueIdentifierReference = string;
/**
 * A human-readable description of intent of this assessment subject placeholder.
 */
export type AssessmentSubjectPlaceholderDescription = string;
/**
 * Uniquely identifies an assessment activity to be performed as part of the event. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type ActivityInstanceUniversallyUniqueIdentifier = string;
/**
 * Uniquely identifies this assessment Platform.
 */
export type AssessmentPlatformUniversallyUniqueIdentifier = string;
/**
 * The title or name for the assessment platform.
 */
export type AssessmentPlatformTitle = string;
/**
 * A reference to a component that is implemented as part of an inventory item.
 */
export type ComponentUniversallyUniqueIdentifierReference1 = string;
/**
 * A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.
 */
export type PartIdentifier1 = string;
/**
 * A textual label that uniquely identifies the part's semantic type.
 */
export type PartName1 = string;
/**
 * A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type PartNamespace1 = string;
/**
 * A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.
 */
export type PartClass1 = string;
/**
 * A name given to the part, which may be used by a tool for display and navigation.
 */
export type PartTitle1 = string;
/**
 * Permits multiple paragraphs, lists, tables etc.
 */
export type PartText1 = string;
/**
 * Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type AssessmentLogEntryUniversallyUniqueIdentifier = string;
/**
 * The title for this event.
 */
export type ActionTitle1 = string;
/**
 * A human-readable description of this event.
 */
export type ActionDescription1 = string;
/**
 * Identifies the start date and time of an event.
 */
export type Start1 = string;
/**
 * Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time.
 */
export type End1 = string;
/**
 * A pointer to the party who is making the log entry.
 */
export type PartyUUIDReference = string;
/**
 * A point to the role-id of the role in which the party is making the log entry.
 */
export type ActorRole = string;
/**
 * References a unique action by UUID.
 */
export type ActionUniversallyUniqueIdentifierReference = string;
/**
 * References a unique task by UUID.
 */
export type TaskUniversallyUniqueIdentifierReference = string;
/**
 * Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given observation across revisions.
 */
export type ObservationUniversallyUniqueIdentifier = string;
/**
 * The title for this observation.
 */
export type ObservationTitle = string;
/**
 * A human-readable description of this assessment observation.
 */
export type ObservatonDescription = string;
/**
 * Identifies how the observation was made.
 */
export type ObservationMethod = string;
/**
 * Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.
 */
export type ObservationType = string;
/**
 * The kind of actor.
 */
export type ActorType = "tool" | "assessment-platform" | "party";
/**
 * A pointer to the tool or person based on the associated type.
 */
export type ActorUUIDReference = string;
/**
 * For a party, this can optionally be used to specify the role the actor was performing.
 */
export type ActorRole1 = string;
/**
 * A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.
 */
export type UUIDReference1 = string;
/**
 * Used to indicate the type of object pointed to by the uuid-ref.
 */
export type UniversallyUniqueIdentifierReferenceType = string;
/**
 * The title or name for the referenced subject.
 */
export type SubjectReferenceTitle = string;
/**
 * >A resolvable URL reference to relevant evidence.
 */
export type RelevantEvidenceReference = string;
/**
 * A human-readable description of this evidence.
 */
export type RelevantEvidenceDescription = string;
/**
 * Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given risk across revisions.
 */
export type RiskUniversallyUniqueIdentifier = string;
/**
 * The title for this risk.
 */
export type RiskTitle = string;
/**
 * A human-readable summary of what was identified regarding the risk.
 */
export type RiskDescription = string;
/**
 * An summary of impact for how the risk affects the system.
 */
export type RiskStatement = string;
/**
 * Describes the status of the associated risk.
 */
export type Status1 = string;
/**
 * Specifies the source of the threat information.
 */
export type ThreatTypeIdentificationSystem = string;
/**
 * An optional location for the threat data, from which this ID originates.
 */
export type ThreatInformationResourceReference = string;
/**
 * The name of the risk metric within the specified system.
 */
export type FacetName = string;
/**
 * Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash.
 */
export type NamingSystem = string;
/**
 * Indicates the value of the facet.
 */
export type FacetValue = string;
/**
 * Uniquely identifies this mitigating factor. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given mitigating factor across revisions.
 */
export type MitigatingFactorUniversallyUniqueIdentifier = string;
/**
 * Points to an implementation statement in the SSP.
 */
export type ImplementationUUID = string;
/**
 * A human-readable description of this mitigating factor.
 */
export type MitigatingFactorDescription = string;
/**
 * A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.
 */
export type UUIDReference2 = string;
/**
 * Used to indicate the type of object pointed to by the uuid-ref.
 */
export type UniversallyUniqueIdentifierReferenceType1 = string;
/**
 * The title or name for the referenced subject.
 */
export type SubjectReferenceTitle1 = string;
/**
 * The date/time by which the risk must be resolved.
 */
export type RiskResolutionDeadline = string;
/**
 * Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given remediation across revisions.
 */
export type RemediationUniversallyUniqueIdentifier = string;
/**
 * Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.
 */
export type RemediationIntent = string;
/**
 * The title for this response activity.
 */
export type ResponseTitle = string;
/**
 * A human-readable description of this response plan.
 */
export type ResponseDescription = string;
/**
 * Uniquely identifies this required asset. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given required asset across revisions.
 */
export type RequiredUniversallyUniqueIdentifier = string;
/**
 * A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.
 */
export type UUIDReference3 = string;
/**
 * Used to indicate the type of object pointed to by the uuid-ref.
 */
export type UniversallyUniqueIdentifierReferenceType2 = string;
/**
 * The title or name for the referenced subject.
 */
export type SubjectReferenceTitle2 = string;
/**
 * The title for this required asset.
 */
export type TitleForRequiredAsset = string;
/**
 * A human-readable description of this required asset.
 */
export type DescriptionOfRequiredAsset = string;
/**
 * Uniquely identifies this assessment task.
 */
export type TaskUniversallyUniqueIdentifier = string;
/**
 * The title for this task.
 */
export type TaskTitle = string;
/**
 * A human-readable description of this task.
 */
export type TaskDescription = string;
/**
 * The task must occur on or after the specified date.
 */
export type TaskStartDate = string;
/**
 * The task must occur on or before the specified date.
 */
export type TaskEndDate = string;
/**
 * Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type RiskLogEntryUniversallyUniqueIdentifier = string;
/**
 * The title for this event.
 */
export type ActionTitle2 = string;
/**
 * A human-readable description of this event.
 */
export type ActionDescription2 = string;
/**
 * Identifies the start date and time of an event.
 */
export type Start2 = string;
/**
 * Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time.
 */
export type End2 = string;
/**
 * Describes the status of the associated risk.
 */
export type RiskStatus = string;
/**
 * References a unique risk response by UUID.
 */
export type ResponseUniversallyUniqueIdentifierReference = string;
/**
 * References an observation defined in the list of observations.
 */
export type ObservationUniversallyUniqueIdentifierReference = string;
/**
 * Uniquely identifies this finding. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. Once assigned, a UUID should be consistantly used for a given finding across revisions.
 */
export type FindingUniversallyUniqueIdentifier = string;
/**
 * The title for this finding.
 */
export type FindingTitle = string;
/**
 * A human-readable description of this finding.
 */
export type FindingDescription = string;
/**
 * Date/time stamp identifying when the finding information was collected.
 */
export type CollectedField = string;
/**
 * Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios.
 */
export type ExpiresField = string;
/**
 * Points to an assessment objective.
 */
export type ObjectiveID1 = string;
/**
 * A reference to a control identifier.
 */
export type ControlIdentifierReference3 = string;
/**
 * The title for this objective status.
 */
export type ObjectiveStatusTitle = string;
/**
 * A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.
 */
export type ObjectiveStatusDescription = string;
/**
 * A brief indication as to whether the objective is satisfied or not within a given system.
 */
export type ImplementationStatus = "satisfied" | "not-satisfied";
/**
 * Identifies the implementation statement in the SSP to which this finding is related.
 */
export type ImplementationStatementUUID = string;
/**
 * References an observation defined in the list of observations.
 */
export type ObservationUniversallyUniqueIdentifierReference1 = string;
/**
 * References an risk defined in the list of risks.
 */
export type RiskUniversallyUniqueIdentifierReference = string;
/**
 * A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistantly used for a given resource across revisions of the document.
 */
export type ResourceUniversallyUniqueIdentifier = string;
/**
 * A name given to the resource, which may be used by a tool for display and navigation.
 */
export type ResourceTitle = string;
/**
 * A short summary of the resource used to indicate the purpose of the resource.
 */
export type ResourceDescription = string;
/**
 * Qualifies the kind of document identifier.
 */
export type DocumentIdentificationScheme1 = string;
/**
 * A line of citation text.
 */
export type CitationText = string;
/**
 * A resolvable URI reference to a resource.
 */
export type HypertextReference1 = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType1 = string;
/**
 * Method by which a hash is derived
 */
export type HashAlgorithm = string;
/**
 * Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.
 */
export type FileName = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType2 = string;

export interface OscalAssessmentResultsSchema {
  "assessment-results": SecurityAssessmentResultsSAR;
}
/**
 * Security assessment results, such as those provided by a FedRAMP assessor in the FedRAMP Security Assessment Report.
 */
export interface SecurityAssessmentResultsSAR {
  uuid: AssessmentResultsUniversallyUniqueIdentifier;
  metadata: PublicationMetadata;
  "import-ap": ImportAssessmentPlan;
  "local-definitions"?: LocalDefinitions;
  results: [AssessmentResult, ...AssessmentResult[]];
  "back-matter"?: BackMatter;
}
/**
 * Provides information about the publication and availability of the containing document.
 */
export interface PublicationMetadata {
  title: DocumentTitle;
  published?: PublicationTimestamp;
  "last-modified": LastModifiedTimestamp;
  version: DocumentVersion;
  "oscal-version": OSCALVersion;
  revisions?: [RevisionHistoryEntry, ...RevisionHistoryEntry[]];
  "document-ids"?: [DocumentIdentifier, ...DocumentIdentifier[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  roles?: [Role, ...Role[]];
  locations?: [Location, ...Location[]];
  parties?: [PartyOrganizationOrPerson, ...PartyOrganizationOrPerson[]];
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).
 */
export interface RevisionHistoryEntry {
  title?: DocumentTitle1;
  published?: PublicationTimestamp1;
  "last-modified"?: LastModifiedTimestamp1;
  version?: DocumentVersion1;
  "oscal-version"?: OSCALVersion1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values in some OSCAL formats.
 */
export interface Property {
  uuid?: PropertyUniversallyUniqueIdentifier;
  name: PropertyName;
  ns?: PropertyNamespace;
  class?: PropertyClass;
  value: string;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair with optional explanatory remarks. The value of an annotated property is a simple scalar value.
 */
export interface AnnotatedProperty {
  name: AnnotatedPropertyName;
  uuid?: AnnotatedPropertyUniversallyUniqueIdentifier;
  ns?: AnnotatedPropertyNamespace;
  value: AnnotatedPropertyValue;
  remarks?: Remarks;
}
/**
 * A reference to a local or remote resource
 */
export interface Link {
  href: HypertextReference;
  rel?: Relation;
  "media-type"?: MediaType;
  text?: LinkText;
}
/**
 * A document identifier qualified by an identifier type.
 */
export interface DocumentIdentifier {
  scheme: DocumentIdentificationScheme;
  identifier: string;
}
/**
 * Defines a function assumed or expected to be assumed by a party in a specific situation.
 */
export interface Role {
  id: RoleIdentifier;
  title: RoleTitle;
  "short-name"?: RoleShortName;
  description?: RoleDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * A location, with associated metadata that can be referenced.
 */
export interface Location {
  uuid: LocationUniversallyUniqueIdentifier;
  title?: LocationTitle;
  address: Address;
  "email-addresses"?: [EmailAddress, ...EmailAddress[]];
  "telephone-numbers"?: [TelephoneNumber, ...TelephoneNumber[]];
  urls?: [LocationURL, ...LocationURL[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * A postal address for the location.
 */
export interface Address {
  type?: AddressType;
  "addr-lines"?: [AddressLine, ...AddressLine[]];
  city?: City;
  state?: State;
  "postal-code"?: PostalCode;
  country?: CountryCode;
}
/**
 * Contact number by telephone.
 */
export interface TelephoneNumber {
  type?: TypeFlag;
  number: string;
}
/**
 * A responsible entity which is either a person or an organization.
 */
export interface PartyOrganizationOrPerson {
  uuid: PartyUniversallyUniqueIdentifier;
  type: PartyType;
  name?: PartyName;
  "short-name"?: PartyShortName;
  "external-ids"?: [PartyExternalIdentifier, ...PartyExternalIdentifier[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "email-addresses"?: [EmailAddress1, ...EmailAddress1[]];
  "telephone-numbers"?: [TelephoneNumber1, ...TelephoneNumber1[]];
  addresses?: [Address1, ...Address1[]];
  "location-uuids"?: [LocationReference, ...LocationReference[]];
  "member-of-organizations"?: [OrganizationalAffiliation, ...OrganizationalAffiliation[]];
  remarks?: Remarks;
}
/**
 * An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)
 */
export interface PartyExternalIdentifier {
  scheme: ExternalIdentifierSchema;
  id: string;
}
/**
 * Contact number by telephone.
 */
export interface TelephoneNumber1 {
  type?: TypeFlag1;
  number: string;
}
/**
 * A postal address for the location.
 */
export interface Address1 {
  type?: AddressType1;
  "addr-lines"?: [AddressLine1, ...AddressLine1[]];
  city?: City1;
  state?: State1;
  "postal-code"?: PostalCode1;
  country?: CountryCode1;
}
/**
 * A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.
 */
export interface ResponsibleParty {
  "party-uuids": [PartyReference, ...PartyReference[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Used by assessment-results to import information about the original plan for assessing the system.
 */
export interface ImportAssessmentPlan {
  href: AssessmentPlanReference;
  remarks?: Remarks;
}
/**
 * Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.
 */
export interface LocalDefinitions {
  "add-objectives-and-methods"?: [AssessmentSpecificControlObjective, ...AssessmentSpecificControlObjective[]];
  activities?: [Activity, ...Activity[]];
  remarks?: Remarks;
}
/**
 * A local definition of a control objective for this assessment. Uses catalog syntax for control objective and assessment actions.
 */
export interface AssessmentSpecificControlObjective {
  "control-id": ControlIdentifierReference;
  description?: ObjectiveDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  parts: [Part, ...Part[]];
  remarks?: Remarks;
}
/**
 * A partition of a control's definition or a child of another part.
 */
export interface Part {
  id?: PartIdentifier;
  name: PartName;
  ns?: PartNamespace;
  class?: PartClass;
  title?: PartTitle;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  prose?: PartText;
  parts?: [Part, ...Part[]];
  links?: [Link, ...Link[]];
}
/**
 * Identifies an assessment or related process that can be performed. In the assessment plan, this is an intended activity which may be associated with an assessment task. In the assessment results, this an activity that was actually performed as part of an assessement.
 */
export interface Activity {
  uuid: AssessmentActivityUniversallyUniqueIdentifier;
  title?: IncludedActivityTitle;
  description: IncludedActivityDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  actions?: [Action, ...Action[]];
  "related-controls"?: ReviewedControlsAndControlObjectives;
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies an individual actions, such as test steps or examination procedures.
 */
export interface Action {
  uuid: ActionUniversallyUniqueIdentifier;
  title?: ActionTitle;
  description: ActionDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "reviewed-controls"?: ReviewedControlsAndControlObjectives;
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies the controls being assessed and their control objectives.
 */
export interface ReviewedControlsAndControlObjectives {
  description?: ControlObjectiveDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "control-selections": [AssessedControls, ...AssessedControls[]];
  "control-objective-selections"?: [ReferenedControlObjectives, ...ReferenedControlObjectives[]];
  remarks?: Remarks;
}
/**
 * Identifies the controls being assessed. In the assessment plan, these are the planned controls. In the assessment results, these are the actual controls, and reflects any changes from the plan.
 */
export interface AssessedControls {
  description?: AssessedControlsDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "include-all"?: All;
  "include-controls"?: [SelectControl, ...SelectControl[]];
  "exclude-controls"?: [SelectControl1, ...SelectControl1[]];
  remarks?: Remarks;
}
/**
 * Used to select a control for inclusion/exclusion based on the control's identifier. A set of statement identifiers can be optionally used to target the inclusion/exclusion to only specific control statements providing more granularity over the specific statements that are within the asessment scope.
 */
export interface SelectControl {
  "control-id": ControlIdentifierReference1;
  "statement-ids"?: [IncludeSpecificStatements, ...IncludeSpecificStatements[]];
}
/**
 * Used to select a control for inclusion/exclusion based on the control's identifier. A set of statement identifiers can be optionally used to target the inclusion/exclusion to only specific control statements providing more granularity over the specific statements that are within the asessment scope.
 */
export interface SelectControl1 {
  "control-id": ControlIdentifierReference2;
  "statement-ids"?: [IncludeSpecificStatements1, ...IncludeSpecificStatements1[]];
}
/**
 * Identifies the control objectives of the assessment. In the assessment plan, these are the planned objectives. In the assessment results, these are the assessed objectives, and reflects any changes from the plan.
 */
export interface ReferenedControlObjectives {
  description?: ControlOjectivesDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "include-all"?: All1;
  "include-objectives"?: [SelectObjective, ...SelectObjective[]];
  "exclude-objectives"?: [SelectObjective, ...SelectObjective[]];
  remarks?: Remarks;
}
/**
 * Used to select a control objective for inclusion/exclusion based on the control objective's identifier.
 */
export interface SelectObjective {
  "objective-id": ObjectiveID;
}
/**
 * A reference to one or more roles with responsibility for performing a function relative to the containing object.
 */
export interface ResponsibleRole {
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "party-uuids"?: [PartyReference, ...PartyReference[]];
  remarks?: Remarks;
}
/**
 * Used by the assessment results and POA&M. In the assessment results, this identifies all of the assessment observations and findings, initial and residual risks, deviations, and disposition. In the POA&M, this identifies initial and residual risks, deviations, and disposition.
 */
export interface AssessmentResult {
  uuid: ResultsUniversallyUniqueIdentifier;
  title: ResultsTitle;
  description: ResultsDescription;
  start: StartField;
  end?: EndField;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "local-definitions"?: LocalDefinitions1;
  "reviewed-controls": ReviewedControlsAndControlObjectives;
  "assessment-subjects"?: [SubjectOfAssessment, ...SubjectOfAssessment[]];
  "assessment-assets"?: AssessmentAssets;
  attestations?: [AttestationStatements, ...AttestationStatements[]];
  "assessment-log"?: AssessmentLog;
  observations?: [Objective, ...Objective[]];
  risks?: [IdentifiedRisk, ...IdentifiedRisk[]];
  findings: [Finding, ...Finding[]];
  remarks?: Remarks;
}
/**
 * Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.
 */
export interface LocalDefinitions1 {
  components?: {
    [k: string]: Component & {
      [k: string]: unknown;
    };
  };
  "inventory-items"?: [InventoryItem, ...InventoryItem[]];
  users?: {
    [k: string]: SystemUser & {
      [k: string]: unknown;
    };
  };
  "assessment-actions"?: [Action1, ...Action1[]];
}
/**
 * A defined component that can be part of an implemented system.
 */
export interface Component {
  type: ComponentType;
  title: ComponentTitle;
  description: ComponentDescription;
  purpose?: Purpose;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  status: Status;
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  protocols?: [ServiceProtocolInformation, ...ServiceProtocolInformation[]];
  remarks?: Remarks;
}
/**
 * Describes the operational status of the system component.
 */
export interface Status {
  state: State2;
  remarks?: Remarks;
}
/**
 * Information about the protocol used to provide a service.
 */
export interface ServiceProtocolInformation {
  uuid?: ServiceProtocolInformationUniversallyUniqueIdentifier;
  name: ProtocolName;
  title?: TitleField;
  "port-ranges"?: [PortRange, ...PortRange[]];
}
/**
 * Where applicable this is the IPv4 port range on which the service operates.
 */
export interface PortRange {
  start?: Start;
  end?: End;
  transport?: Transport;
}
/**
 * A single managed inventory item within the system.
 */
export interface InventoryItem {
  uuid: InventoryItemUniversallyUniqueIdentifier;
  description: InventoryItemDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  "implemented-components"?: [ImplementedComponent, ...ImplementedComponent[]];
  remarks?: Remarks;
}
/**
 * The set of components that are implemented in a given system inventory item.
 */
export interface ImplementedComponent {
  "component-uuid": ComponentUniversallyUniqueIdentifierReference;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * A type of user that interacts with the system based on an associated role.
 */
export interface SystemUser {
  title?: UserTitle;
  "short-name"?: UserShortName;
  description?: UserDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "role-ids"?: [RoleIdentifierReference, ...RoleIdentifierReference[]];
  "authorized-privileges"?: [Privilege, ...Privilege[]];
  remarks?: Remarks;
}
/**
 * Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.
 */
export interface Privilege {
  title: TitleField1;
  description?: PrivilegeDescription;
  "functions-performed": [FunctionsPerformed, ...FunctionsPerformed[]];
}
/**
 * Identifies an assessment-related event that must occur as part of executing an assessment plan, the result of which may be recorded within the assessment log in assessment results.
 */
export interface Action1 {
  uuid: EventUniversallyUniqueIdentifier;
  title?: EventTitle;
  description: EventDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  timing?: EventTiming;
  "assessment-subjects"?: [SubjectOfAssessment, ...SubjectOfAssessment[]];
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  "associated-activities"?: [AssociatedActivity, ...AssociatedActivity[]];
  remarks?: Remarks;
}
/**
 * The timing under which the event is intended to occur.
 */
export interface EventTiming {
  "on-date"?: OnDateCondition;
  "within-date-range"?: OnDateRangeCondition;
  "at-frequency"?: FrequencyCondition;
}
/**
 * The event is intended to occur on the specified date.
 */
export interface OnDateCondition {
  date: OnDateCondition1;
}
/**
 * The event is intended to occur within the specified date range.
 */
export interface OnDateRangeCondition {
  start: StartDateCondition;
  end: EndDateCondition;
}
/**
 * The event is intended to occur at the specified frequency.
 */
export interface FrequencyCondition {
  period: Period;
  unit: TimeUnit;
}
/**
 * Identifies system elements being assessed, such as components, inventory items, and locations. In the assessment plan, this identifies a planned assessment subject. In the assessment results this is an actual assessment subject, and reflects any changes from the plan. exactly what will be the focus of this assessment. Any subjects not identified in this way are out-of-scope.
 */
export interface SubjectOfAssessment {
  type: SubjectType;
  description?: IncludeSubjectsDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "include-all"?: All2;
  "include-subjects"?: [SelectAssessmentSubject, ...SelectAssessmentSubject[]];
  "exclude-subjects"?: [SelectAssessmentSubject, ...SelectAssessmentSubject[]];
  remarks?: Remarks;
}
/**
 * Identifies a set of assessment subjects to include/exclude by UUID.
 */
export interface SelectAssessmentSubject {
  "uuid-ref": UUIDReference;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Identifies an individual activity to be performed as part of an action.
 */
export interface AssociatedActivity {
  uuid: AssociatedActivityUniversallyUniqueIdentifier;
  "activity-uuid": ActivityUniversallyUniqueIdentifierReference;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  "assessment-subjects"?: [SubjectOfAssessment, ...SubjectOfAssessment[]];
  "assessment-subject-placeholder"?: AssessmentSubjectPlaceholder;
  remarks?: Remarks;
}
/**
 * Used when the assessment subjects will be determined as part of one or more other assessment activities. These assessment subjects will be recorded in the assessment results.
 */
export interface AssessmentSubjectPlaceholder {
  description?: AssessmentSubjectPlaceholderDescription;
  sources: [AssessmentSubjectSource, ...AssessmentSubjectSource[]];
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Assessment subjects will be identified while conducting the referenced activity-instance.
 */
export interface AssessmentSubjectSource {
  "activity-instance-uuid": ActivityInstanceUniversallyUniqueIdentifier;
}
/**
 * Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.
 */
export interface AssessmentAssets {
  components?: {
    [k: string]: Component & {
      [k: string]: unknown;
    };
  };
  "assessment-platforms": [AssessmentPlatform, ...AssessmentPlatform[]];
}
/**
 * Used to represent the toolset used to perform aspects of the assessment.
 */
export interface AssessmentPlatform {
  uuid: AssessmentPlatformUniversallyUniqueIdentifier;
  title?: AssessmentPlatformTitle;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "uses-components"?: [UsesComponent, ...UsesComponent[]];
  remarks?: Remarks;
}
/**
 * The set of components that are used by the assessment platform.
 */
export interface UsesComponent {
  "component-uuid": ComponentUniversallyUniqueIdentifierReference1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * A set of textual statements, typically written by the assessor.
 */
export interface AttestationStatements {
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  parts: [AssessmentPart, ...AssessmentPart[]];
}
/**
 * A partition of an assessment plan or results or a child of another part.
 */
export interface AssessmentPart {
  uuid?: PartIdentifier1;
  name: PartName1;
  ns?: PartNamespace1;
  class?: PartClass1;
  title?: PartTitle1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  prose: PartText1;
  parts?: [AssessmentPart, ...AssessmentPart[]];
  links?: [Link, ...Link[]];
}
/**
 * A log of all assessment-related actions taken.
 */
export interface AssessmentLog {
  entries: [AssessmentLogEntry, ...AssessmentLogEntry[]];
}
/**
 * Identifies the result of an action and/or task that occured as part of executing an assessment plan or an assessment event that occured in producing the assessment results.
 */
export interface AssessmentLogEntry {
  uuid: AssessmentLogEntryUniversallyUniqueIdentifier;
  title?: ActionTitle1;
  description?: ActionDescription1;
  start: Start1;
  end?: End1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "logged-by"?: [LoggedBy, ...LoggedBy[]];
  "related-actions"?: [ActionReference, ...ActionReference[]];
  "related-tasks"?: [TaskReference, ...TaskReference[]];
  remarks?: Remarks;
}
/**
 * Used to indicate who created a log entry in what role.
 */
export interface LoggedBy {
  "party-uuid": PartyUUIDReference;
  "role-id"?: ActorRole;
}
/**
 * Identifies an individual action for which the containing object is a consequence of.
 */
export interface ActionReference {
  "action-uuid": ActionUniversallyUniqueIdentifierReference;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies an individual task for which the containing object is a consequence of.
 */
export interface TaskReference {
  "task-uuid": TaskUniversallyUniqueIdentifierReference;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "responsible-parties"?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  "assessment-subjects"?: [SubjectOfAssessment, ...SubjectOfAssessment[]];
  remarks?: Remarks;
}
/**
 * Describes an individual observation.
 */
export interface Objective {
  uuid: ObservationUniversallyUniqueIdentifier;
  title?: ObservationTitle;
  description: ObservatonDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  methods: [ObservationMethod, ...ObservationMethod[]];
  types?: [ObservationType, ...ObservationType[]];
  origins?: [Origin, ...Origin[]];
  subjects?: [IdentifiesTheSubject, ...IdentifiesTheSubject[]];
  "relevant-evidence"?: [RelevantEvidence, ...RelevantEvidence[]];
  remarks?: Remarks;
}
/**
 * Identifies the source of the finding, such as a tool, interviewed person, or activity.
 */
export interface Origin {
  actors: [AssessmentActor, ...AssessmentActor[]];
  "related-actions"?: [ActionReference, ...ActionReference[]];
  "related-tasks"?: [TaskReference, ...TaskReference[]];
}
/**
 * The actor that produces an observation, a finding, or a risk. One or more actor type can be used to specify a person that is using a tool.
 */
export interface AssessmentActor {
  type: ActorType;
  "uuid-ref": ActorUUIDReference;
  "role-id"?: ActorRole1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
}
/**
 * A pointer to a resource based on its universally unique identifier (UUID). Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.
 */
export interface IdentifiesTheSubject {
  "uuid-ref": UUIDReference1;
  type: UniversallyUniqueIdentifierReferenceType;
  title?: SubjectReferenceTitle;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Links this observation to relevant evidence.
 */
export interface RelevantEvidence {
  href?: RelevantEvidenceReference;
  description: RelevantEvidenceDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * An identified risk.
 */
export interface IdentifiedRisk {
  uuid: RiskUniversallyUniqueIdentifier;
  title: RiskTitle;
  description: RiskDescription;
  statement: RiskStatement;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  status: Status1;
  origins?: [Origin, ...Origin[]];
  "threat-ids"?: [ThreatID, ...ThreatID[]];
  characterizations?: [Characterization, ...Characterization[]];
  "mitigating-factors"?: [MitigatingFactor, ...MitigatingFactor[]];
  deadline?: RiskResolutionDeadline;
  remediations?: [RiskResponse, ...RiskResponse[]];
  "risk-log"?: RiskLog;
  "related-observations"?: [RelatedObservation, ...RelatedObservation[]];
}
/**
 * A pointer, by ID, to an externally-defined threat.
 */
export interface ThreatID {
  system: ThreatTypeIdentificationSystem;
  href?: ThreatInformationResourceReference;
  id: string;
}
/**
 * A collection of descriptive data about the containing object from a specific origin.
 */
export interface Characterization {
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  origin: Origin;
  facets: [Facet, ...Facet[]];
}
/**
 * An individual characteristic that is part of a larger set produced by the same actor.
 */
export interface Facet {
  name: FacetName;
  system: NamingSystem;
  value: FacetValue;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Describes an existing mitigating factor that may affect the overall determination of the risk, with an optional link to an implementation statement in the SSP.
 */
export interface MitigatingFactor {
  uuid: MitigatingFactorUniversallyUniqueIdentifier;
  "implementation-uuid"?: ImplementationUUID;
  description: MitigatingFactorDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  subjects?: [IdentifiesTheSubject1, ...IdentifiesTheSubject1[]];
}
/**
 * A pointer to a resource based on its universally unique identifier (UUID). Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.
 */
export interface IdentifiesTheSubject1 {
  "uuid-ref": UUIDReference2;
  type: UniversallyUniqueIdentifierReferenceType1;
  title?: SubjectReferenceTitle1;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Describes either recommended or an actual plan for addressing the risk.
 */
export interface RiskResponse {
  uuid: RemediationUniversallyUniqueIdentifier;
  lifecycle: RemediationIntent;
  title: ResponseTitle;
  description: ResponseDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  origins?: [Origin, ...Origin[]];
  "required-assets"?: [RequiredAsset, ...RequiredAsset[]];
  tasks?: [Task, ...Task[]];
  remarks?: Remarks;
}
/**
 * Identifies an asset required to achieve remediation.
 */
export interface RequiredAsset {
  uuid: RequiredUniversallyUniqueIdentifier;
  subjects?: [IdentifiesTheSubject2, ...IdentifiesTheSubject2[]];
  title?: TitleForRequiredAsset;
  description: DescriptionOfRequiredAsset;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * A pointer to a resource based on its universally unique identifier (UUID). Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.
 */
export interface IdentifiesTheSubject2 {
  "uuid-ref": UUIDReference3;
  type: UniversallyUniqueIdentifierReferenceType2;
  title?: SubjectReferenceTitle2;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  remarks?: Remarks;
}
/**
 * Represents a scheduled event or milestone, which may be associated with a series of assessment actions.
 */
export interface Task {
  uuid: TaskUniversallyUniqueIdentifier;
  title: TaskTitle;
  description?: TaskDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  start: TaskStartDate;
  end: TaskEndDate;
  "related-actions"?: [ActionReference, ...ActionReference[]];
  "responsible-roles"?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * A log of all risk-related actions taken.
 */
export interface RiskLog {
  entries: [RiskLogEntry, ...RiskLogEntry[]];
}
/**
 * Identifies the result of an action and/or task that occured as part of executing an assessment plan or an assessment event that occured in producing the assessment results.
 */
export interface RiskLogEntry {
  uuid: RiskLogEntryUniversallyUniqueIdentifier;
  title?: ActionTitle2;
  description?: ActionDescription2;
  start: Start2;
  end?: End2;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "logged-by"?: [LoggedBy, ...LoggedBy[]];
  "status-change"?: RiskStatus;
  "related-responses"?: [ActionReference1, ...ActionReference1[]];
  remarks?: Remarks;
}
/**
 * Identifies an individual risk response that this log entry is for.
 */
export interface ActionReference1 {
  "response-uuid": ResponseUniversallyUniqueIdentifierReference;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  "related-actions"?: [ActionReference, ...ActionReference[]];
  remarks?: Remarks;
}
/**
 * Relates the finding to a set of referenced observations that were used to determine the finding.
 */
export interface RelatedObservation {
  "observation-uuid": ObservationUniversallyUniqueIdentifierReference;
}
/**
 * Describes an individual finding.
 */
export interface Finding {
  uuid: FindingUniversallyUniqueIdentifier;
  title: FindingTitle;
  description: FindingDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  origins?: [Origin, ...Origin[]];
  collected: CollectedField;
  expires?: ExpiresField;
  "objective-status"?: ObjectiveStatus;
  "implementation-statement-uuid"?: ImplementationStatementUUID;
  "related-observations"?: [RelatedObservation1, ...RelatedObservation1[]];
  "related-risks"?: [AssociatedRisk, ...AssociatedRisk[]];
  remarks?: Remarks;
}
/**
 * Captures an assessor's conclusions regarding the degree to which an objective is satisfied.
 */
export interface ObjectiveStatus {
  "objective-id"?: ObjectiveID1;
  "control-id"?: ControlIdentifierReference3;
  title?: ObjectiveStatusTitle;
  description?: ObjectiveStatusDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  links?: [Link, ...Link[]];
  status: ImplementationStatus;
  remarks?: Remarks;
}
/**
 * Relates the finding to a set of referenced observations that were used to determine the finding.
 */
export interface RelatedObservation1 {
  "observation-uuid": ObservationUniversallyUniqueIdentifierReference1;
}
/**
 * Relates the finding to a set of referenced risks that were used to determine the finding.
 */
export interface AssociatedRisk {
  "risk-uuid": RiskUniversallyUniqueIdentifierReference;
}
/**
 * A collection of resources, which may be included directly or by reference.
 */
export interface BackMatter {
  resources?: [Resource, ...Resource[]];
}
/**
 * A resource associated with content in the containing document. A resource may be directly included in the document base64 encoded or may point to one or more equavalent internet resources.
 */
export interface Resource {
  uuid: ResourceUniversallyUniqueIdentifier;
  title?: ResourceTitle;
  description?: ResourceDescription;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  "document-ids"?: [DocumentIdentifier1, ...DocumentIdentifier1[]];
  citation?: Citation;
  rlinks?: [ResourceLink, ...ResourceLink[]];
  base64?: Base64;
  remarks?: Remarks;
}
/**
 * A document identifier qualified by an identifier type.
 */
export interface DocumentIdentifier1 {
  scheme: DocumentIdentificationScheme1;
  identifier: string;
}
/**
 * A citation consisting of end note text and optional structured bibliographic data.
 */
export interface Citation {
  text: CitationText;
  props?: [Property, ...Property[]];
  annotations?: [AnnotatedProperty, ...AnnotatedProperty[]];
  biblio?: BibliographicDefinition;
}
/**
 * A container for structured bibliographic information. The model of this information is undefined by OSCAL.
 */
export interface BibliographicDefinition {}
/**
 * A pointer to an external resource with an optional hash for verification and change detection.
 */
export interface ResourceLink {
  href: HypertextReference1;
  "media-type"?: MediaType1;
  hashes?: [Hash, ...Hash[]];
}
/**
 * A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
 */
export interface Hash {
  algorithm: HashAlgorithm;
  value: string;
}
/**
 * The Base64 alphabet in RFC 2045 - aligned with XSD.
 */
export interface Base64 {
  filename?: FileName;
  "media-type"?: MediaType2;
  value: string;
}
